-- development version(change to production when stable)

-- drop database for repetitive imports during development/debugging

-- do we want to do this if we want to be user senadmin???
-- or does env login/ db connection via pg-pool solve this potential issue?
-- TODO: figure out if this is issue...

--DROP DATABASE IF EXISTS senadmin;
-- ERROR:  cannot drop the currently open database
-- ERROR:  database "senadmin" already exists


-- create database
CREATE DATABASE IF NOT EXISTS senadmin;
-- switch to this database
\c senadmin;

-- create tables
-- cascade allows subsequent dropping on tables with master dependencies

-- TODO: rename column names to match .xlsx file for ETL convenience

DROP TABLE IF EXISTS char CASCADE;
CREATE TABLE char
(
    char_id integer GENERATED ALWAYS AS IDENTITY,
    char_code varchar NOT NULL,
    title  varchar NOT NULL,
    description varchar NOT NULL,
    description_path varchar NOT NULL, --revise/reformat this on extraction?
    image_path varchar NOT NULL, 
    -- revision varchar NOT NULL, no revision?
    PRIMARY KEY (char_id)
);

DROP TABLE IF EXISTS housing CASCADE;
CREATE TABLE housing
(
    housing_id integer GENERATED ALWAYS AS IDENTITY,
    housing_code varchar NOT NULL,
    title  varchar NOT NULL,
    -- description varchar NOT NULL, not used
    image_path varchar NOT NULL,
    mech_path varchar, --if null/empty -> 'x'
    revision varchar NOT NULL,
    PRIMARY KEY (housing_id)
);

-- insert sample data for testing
-- GENERATED ALWAYS AS IDENTITY WILL AUTO GENERATE THE ID. YOU CANNOT INSERT OR UPDATE
-- IF NEEDED TO MODIFY ID, CHANGE TO GENERATED BY DEFAULT AS IDENTITY
INSERT INTO char (char_code, title, description, description_path, image_path)
VALUES
    ('EHS1', 'HS Hall or Magneto Resistive Switch Sensor', 'Sensitive Either Pole Hall Switch, 38 G', 'EHS1.html', 'EHS1-Model.png') --, if multiple lines
;


INSERT INTO housing (housing_code, title, image_path, mech_path, revision)
VALUES
    ('ALUM', 'Aluminum Housings start with A', 'ALUM-Model.png', 'x', 'A') --,
;

-- C:\Users\senadmin\WebApps\sensor-internal-v1\database\schema.sql
-- DROP TABLE IF EXISTS housing CASCADE;
-- CREATE TABLE options
-- (
--     options_id integer GENERATED ALWAYS AS IDENTITY,
--     options_code varchar NOT NULL,
--     title  varchar NOT NULL,
--     description varchar NOT NULL, not used
--     image_path varchar NOT NULL,
--     revision varchar NOT NULL,
--     PRIMARY KEY (housing_id)
-- );
-- INSERT INTO options (options_code, title, description, image_path, revision)
-- VALUES
--     ('TEST', 'Sample data option', 'this is a sample data piece', 'Sample-Model.png', 'A') --,
-- ;





-- DROP SCHEMA IF EXISTS review_tables;
-- CREATE SCHEMA review_tables;

-- DROP TABLE IF EXISTS reviews CASCADE;
-- CREATE TABLE reviews (
--  --product_id     int GENERATED BY DEFAULT AS IDENTITY,
--  review_id      int UNIQUE,
--  product_id     int GENERATED BY DEFAULT AS IDENTITY,
--  rating         int NOT NULL,
--  post_date           date NOT NULL,
--  summary        varchar(250) NOT NULL,
--  body           varchar(500) NOT NULL,
--  recommend      boolean NOT NULL,
--  reported       boolean NOT NULL,
--  reviewer_name  varchar(50) NOT NULL,
--  reviewer_email varchar(50) NOT NULL,
--  response       varchar(250),
--  helpfulness    integer NOT NULL,
--  PRIMARY KEY (review_id)
-- );
-- --TODO add unique constraints on email and name...
-- -- DROP INDEX if EXISTS product_key;
-- -- CREATE INDEX product_key ON reviews (product_id);

-- copy reviews from '/Users/jverploeg/Desktop/data/reviews.csv' delimiter ',' csv header;
-- DROP INDEX if EXISTS product_key;
-- CREATE INDEX product_key ON reviews (product_id);


-- -- characteristics
-- -- DROP TABLE IF EXISTS characteristics CASCADE;
-- -- CREATE TABLE characteristics (
-- --  characteristic_id int PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
-- --  char_name              varchar(50) NOT NULL,
-- --  char_value             numeric(5,2)
-- -- );
-- DROP TABLE IF EXISTS characteristics CASCADE;
-- CREATE TABLE characteristics (
--  characteristic_id int PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--  product_id              integer GENERATED BY DEFAULT AS IDENTITY,
--  name             varchar(50) NOT NULL
-- );
-- DROP INDEX if EXISTS char_key;
-- CREATE INDEX char_key ON characteristics (product_id);
-- copy characteristics from '/Users/jverploeg/Desktop/data/characteristics.csv'  delimiter ',' csv header;





-- -- ************************************** characteristics-reviews
-- DROP TABLE IF EXISTS characteristics_reviews CASCADE;
-- CREATE TABLE characteristics_reviews
-- (
--  id               int PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--  characteristic_id int,-- GENERATED BY DEFAULT AS IDENTITY,
--  review_id         int,-- GENERATED BY DEFAULT AS IDENTITY,
--  value             integer not null
--  --CONSTRAINT PK_characterisctics PRIMARY KEY ( id ),
--  --CONSTRAINT fk_char FOREIGN KEY ( characteristic_id ) REFERENCES characteristics ( characteristic_id ),
--  --CONSTRAINT fk_review FOREIGN KEY ( review_id ) REFERENCES reviews ( review_id )
--  --CONSTRAINT fk_char FOREIGN KEY ( characteristic_id ) REFERENCES characteristics ( characteristic_id )
-- );
-- DROP INDEX if EXISTS char_rev_key;
-- CREATE INDEX char_rev_key ON characteristics_reviews (review_id);
-- copy characteristics_reviews from '/Users/jverploeg/Desktop/data/characteristic_reviews.csv'  delimiter ',' csv header;



-- -- ************************************** photos
-- DROP TABLE IF EXISTS photos;
-- CREATE TABLE photos
-- (
--  id               int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
--  review_id int GENERATED BY DEFAULT AS IDENTITY,
--  product_id     int,
--  url       varchar(150) NOT NULL,
--  CONSTRAINT fk_reviews FOREIGN KEY ( review_id ) REFERENCES reviews ( review_id )
-- );
-- DROP INDEX if EXISTS photo_key;
-- CREATE INDEX photo_key ON photos (product_id);
-- copy photos (id, review_id, url)  from '/Users/jverploeg/Desktop/data/reviews_photos.csv' delimiter ','  csv header;
-- update photos set product_id = reviews.product_id from reviews where photos.review_id = reviews.review_id;
-- -- DROP INDEX if EXISTS photo_key;
-- -- CREATE INDEX photo_key ON photos (product_id);




-- -- ************************************** ratings
-- DROP TABLE IF EXISTS ratings CASCADE;
-- CREATE TABLE ratings
-- (
--  product_id integer,
--  count        integer default(0),
--  rating       double precision,
--  average      numeric(4,3),
--  recommended      integer
-- );
-- DROP INDEX if EXISTS rating_key;
-- CREATE INDEX rating_key ON ratings (product_id);
-- insert into ratings (product_id, count, rating, recommended) select product_id, count(product_id), sum(rating), count(recommend) from reviews group by product_id;
-- update ratings set average = rating / count;